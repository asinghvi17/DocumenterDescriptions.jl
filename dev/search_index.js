var documenterSearchIndex = {"docs":
[{"location":"preexisting_description/","page":"-","title":"-","text":"This file has a preexisting description that is NOT this one.","category":"page"},{"location":"preexisting_description/","page":"-","title":"-","text":"Description = \"This is the preexisting description of this file\"","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [DocumenterDescriptions]","category":"page"},{"location":"api/#DocumenterDescriptions.AbstractDescriber","page":"API","title":"DocumenterDescriptions.AbstractDescriber","text":"abstract type AbstractDescriber\n\nAbstract supertype for all describer plugins.\n\nInterface\n\n(plugin::YourDescriber)(flattened_text::String)::String: Obtain the description of a page as a string, return it as a String.\n(::Type{YourDescriber})(): There should be a no-argument constructor.\n\nOptionally, you can hook into the more descriptive API by defining (plugin::YourDescriber)(page, doc)::String.\n\n\n\n\n\n","category":"type"},{"location":"api/#DocumenterDescriptions.FirstNCharsDescriber","page":"API","title":"DocumenterDescriptions.FirstNCharsDescriber","text":"FirstNCharsDescriber(; nchars = 160, approx = true) <: AbstractDescriber\n\nA describer that takes the first nchars characters of text.\n\nArguments\n\nnchars::Int = 160: The target number of characters to include in the description\napprox::Bool = true: If true, will try to break at word boundaries rather than exactly at nchars characters\n\nDetails\n\nWhen approx=true, the describer will attempt to break at word boundaries to avoid cutting words in half. It will return slightly fewer characters than requested to ensure this. If approx=false, it will break exactly at nchars characters.\n\nIf the input text is shorter than nchars, the entire text is returned.\n\nThe text is preprocessed to collapse multiple whitespace characters into single spaces and trim leading/trailing whitespace.\n\n\n\n\n\n","category":"type"},{"location":"api/#DocumenterDescriptions.WriteToFile","page":"API","title":"DocumenterDescriptions.WriteToFile","text":"WriteToFile(describer) <: AbstractDescriber\n\nWraps another describer, and writes the generated description to the source file.\n\nUseful if you're running an LLM to generate summaries and want to minimize cost!\n\nConstruct the object and pass it to the plugin kwarg of makedocs.\n\nArguments\n\ndescriber: The describer to use to generate the description.\n\n\n\n\n\n","category":"type"},{"location":"#DocumenterDescriptions.jl","page":"Home","title":"DocumenterDescriptions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DocumenterDescriptions.jl automatically adds descriptions generated on every page into your metadata, improving the searchability of your website.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simply loading it is enough to make it start with the default (FirstNChars(160 #= chars =#)) description generator.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to customize which generator you use (right now there are no others, but there will be :D), you can do so by passing a custom describer to the plugin kwarg of makedocs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Documenter, DocumenterDescriptions\\\n# ...\nmakedocs(\n    ...,\n    plugins = [FirstNCharsDescriber(nchars = 160), ...]\n)","category":"page"},{"location":"#How-does-it-work?","page":"Home","title":"How does it work?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These \"describers\" are all subtypes of AbstractDescriber, and are used to generate the description for a page.  They operate on each page individually by default.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The default one is FirstNCharsDescriber, which takes the first nchars characters of the page and uses that as the description.  It's also a bit fuzzy, so it won't cut off words.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also pass a create a custom describer by defining your own subtype of AbstractDescriber and implementing the (plugin::MyDescriber)(page::String) method, or go a bit more granular and implement the (plugin::MyDescriber)(page::Documenter.Page, doc::Documenter.Document) method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the docstring of AbstractDescriber for more details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We plan to add LLM-powered describers as well as description caching (to decrease your API costs) in the future!","category":"page"}]
}
